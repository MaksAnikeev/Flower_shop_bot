import os
from enum import Enum, auto
from random import choice
from textwrap import dedent
from time import sleep

import phonenumbers
import requests
from dotenv import load_dotenv
from more_itertools import chunked
from telegram import (Bot, InlineKeyboardButton, InlineKeyboardMarkup,
                      KeyboardButton, ParseMode, ReplyKeyboardMarkup, Update)
from telegram.ext import (CallbackContext, CallbackQueryHandler,
                          CommandHandler, ConversationHandler, Filters,
                          MessageHandler, Updater)


class States(Enum):
    START = auto()
    CHOISE_REASON = auto()
    CHOISE_CATEGORY = auto()
    CHOISE_PEOPLE = auto()
    REASON_TO_FLORIST = auto()
    MESSAGE_TO_FLORIST = auto()
    MESSAGE_TO_COURIER = auto()
    GET_NAME = auto()
    GET_BUNCH_ID = auto()
    GET_ADDRESS = auto()
    USER_PHONE_NUMBER = auto()
    GET_DELIVERY_PERIOD = auto()
    CONFIRM_ORDER = auto()


class BotData:
    FLORIST_CHAT_ID = 5432002795
    COURIER_CHAT_ID = 5432002795
    # frorist_chat_id = 704859099
    # courier_chat_id = 5432002795


def call_api_get(endpoint):
    url = f"http://127.0.0.1:8000/{endpoint}"
    response = requests.get(url)
    response.raise_for_status()
    return response.json()


def call_api_post(endpoint, payload):
    url = f"http://127.0.0.1:8000/{endpoint}"
    response = requests.post(url, data=payload)
    response.raise_for_status()
    return response.json()


def greeting(update, context):
    if update.message.chat.id == BotData.COURIER_CHAT_ID:
        update.message.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (2023-01-23)')
        return States.MESSAGE_TO_COURIER

    greeting_msg = '''–ó–∞–∫–∞–∂–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–≥–æ –±—É–∫–µ—Ç–∞,
    —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—à–∏—Ö –ª—é–±–∏–º—ã—Ö, —Ä–æ–¥–Ω—ã—Ö –∏ –∫–æ–ª–ª–µ–≥.
    –ù–∞—à –±—É–∫–µ—Ç —Å–æ —Å–º—ã—Å–ª–æ–º —Å—Ç–∞–Ω–µ—Ç –≥–ª–∞–≤–Ω—ã–º –ø–æ–¥–∞—Ä–∫–æ–º –Ω–∞ –≤–∞—à–µ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–µ!'''
    update.message.reply_text(text=greeting_msg)
    sleep(2)
    update.message.reply_text(text='–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É')
    return States.START


def start(update, context):
    reasons = call_api_get('reasons/send/')['reasons']
    context.user_data['reasons'] = reasons
    reasons.extend(["–ë–µ–∑ –ø–æ–≤–æ–¥–∞", "–î—Ä—É–≥–æ–π –ø–æ–≤–æ–¥"])
    message_keyboard = list(chunked(reasons, 2))

    markup = ReplyKeyboardMarkup(
        message_keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    menu_msg = '–ö –∫–∞–∫–æ–º—É —Å–æ–±—ã—Ç–∏—é –≥–æ—Ç–æ–≤–∏–º—Å—è? –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ª–∏–±–æ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π'

    update.message.reply_text(text=menu_msg, reply_markup=markup)
    return States.CHOISE_REASON


def another_reason(update, context):
    update.message.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –ø–æ–≤–æ–¥ –∏ —Ñ–ª–æ—Ä–∏—Å—Ç —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è')
    return States.REASON_TO_FLORIST


def get_phonenumber(update, context):
    context.user_data['another_reason'] = update.message.text
    update.message.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Ñ–ª–æ—Ä–∏—Å—Ç.'
                              ' –ù–æ–º–µ—Ä –≤–≤–æ–¥–∏—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7(946)3457687')
    return States.MESSAGE_TO_FLORIST


def message_to_florist(update, context):
    phone_number = phonenumbers.parse(update.message.text, "RU")
    if not phonenumbers.is_valid_number(phone_number):
        message_keyboard = [
            [
                KeyboardButton(
                    '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                    request_contact=True)
            ]
        ]
        markup = ReplyKeyboardMarkup(
            message_keyboard,
            one_time_keyboard=True,
            resize_keyboard=True)
        error_message = dedent("""\
            –í–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ù–æ–º–µ—Ä –≤–≤–æ–¥–∏—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7(946)3457687. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:
            """)
        update.message.reply_text(error_message, reply_markup=markup)
        return States.MESSAGE_TO_FLORIST

    context.user_data["phone_number"] = update.message.text
    menu_msg = dedent(f"""\
            <b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–ª–æ—Ä–∏—Å—Ç—É, –æ–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è</b>
            
            <b>–ü–æ–≤–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞:</b>
            {context.user_data['another_reason']}
            <b>–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏:</b>
            {context.user_data["phone_number"]}
            """).replace("    ", "")
    update.message.reply_text(
        text=menu_msg,
        parse_mode=ParseMode.HTML
    )
    update.message.chat.id = BotData.FLORIST_CHAT_ID
    menu_msg = dedent(f"""\
            —ç—Ç–æ –≤–∏–¥–∏—Ç —Ñ–ª–æ—Ä–∏—Å—Ç
            <b>–ü–æ–≤–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞:</b>
            {context.user_data['another_reason']}
            <b>–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏:</b>
            {context.user_data["phone_number"]}
            """).replace("    ", "")
    update.message.reply_text(
        text=menu_msg,
        parse_mode=ParseMode.HTML
    )
    return


def send_orders_courier(update, context):
    payload = {
        "delivered_at": update.message.text,
    }
    response = call_api_post('courier/send/', payload=payload)
    orders = response['orders']
    update.message.chat.id = BotData.COURIER_CHAT_ID

    for order in orders:
        menu_msg = dedent(f"""\
                    <b>–ê–¥—Ä–µ—Å:</b>
                    {order['address']}
                    <b>–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:</b>
                    {order['delivered_at']}
                    <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ:</b>
                    {order['firstname']}
                    <b>–¢–∏–ø –æ–ø–ª–∞—Ç—ã:</b>
                    {order['method_payment']}
                    <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b>
                    {order['phonenumber']}
                    <b>ID –±—É–∫–µ—Ç–∞:</b>
                    {order['bunch_id']}
                    <b>–¶–µ–Ω–∞:</b>
                    {order['price']}
                    <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>
                    {order['comment']}
                    """).replace("    ", "")
        update.message.reply_text(
            text=menu_msg,
            parse_mode=ParseMode.HTML
        )
    return


def choise_category(update, context):
    response = call_api_get('categories/send/')
    categories = response['categories']
    context.user_data['categories'] = categories
    categories.extend(["–ù–µ –≤–∞–∂–Ω–æ"])
    message_keyboard = list(chunked(categories, 2))
    markup = ReplyKeyboardMarkup(
        message_keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    menu_msg = '–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é'
    update.message.reply_text(text=menu_msg, reply_markup=markup)
    context.user_data['reason'] = update.message.text
    return States.CHOISE_CATEGORY


def get_answer_from_catalogue(context, random_category=False):
    payload = {
        "category": context.user_data['category'],
        "reason": context.user_data['reason'],
    }
    response = call_api_post('bunch/send/', payload=payload)
    if random_category:
        response = call_api_get('random_bunch/send/')
    return response


def get_bunch(update, context):
    context.user_data['category'] = update.message.text
    bunches = get_answer_from_catalogue(context)
    if not bunches['bunch']:
        get_default_bunch(update, context)
        return States.START
    context.user_data['bunches'] = bunches
    get_choice_bunch(update, context)
    return States.CHOISE_PEOPLE


def get_default_bunch(update, context):
    update.message.reply_text('–ë—É–∫–µ—Ç–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–µ—Çüò•, –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–π –±—É–∫–µ—Ç')
    response = call_api_get('random_bunch/send/')
    bunch = response['bunch']
    menu_msg = get_menu_msg(bunch)
    context.user_data["order"] = menu_msg
    message_keyboard = [
        [
            "–§–ª–æ—Ä–∏—Å—Ç",
            "–ó–∞–∫–∞–∑"],
        ["–ó–∞–¥–∞—Ç—å –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"],
    ]

    markup = ReplyKeyboardMarkup(
        message_keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    bunch_img = requests.get(bunch['image'])
    update.message.reply_photo(
        bunch_img.content,
        caption=menu_msg,
        reply_markup=markup,
        parse_mode=ParseMode.HTML
    )
    return States.START


def get_menu_msg(bunch):
    menu_msg = dedent(f"""\
        <b>{bunch.get('name')}</b>
        <b>–¶–µ–Ω–∞ {bunch.get('price')} —Ä—É–±</b>
        <b>–û–ø–∏—Å–∞–Ω–∏–µ</b>
        {bunch.get('description')}
        <b>–°–æ—Å—Ç–∞–≤:</b>
        {bunch.get('composition')}
        <b>id –±—É–∫–µ—Ç–∞:</b>
        {bunch.get('bunch_id')}
        """).replace("    ", "")
    return menu_msg


def get_choice_bunch(update, context):
    bunch = choice(context.user_data['bunches']['bunch'])
    menu_msg = get_menu_msg(bunch)
    context.user_data["order"] = menu_msg
    message_keyboard = [
        [
            "–§–ª–æ—Ä–∏—Å—Ç",
            "–ó–∞–∫–∞–∑"],
        ["–î—Ä—É–≥–æ–π –±—É–∫–µ—Ç",
         "–í—Å–µ –±—É–∫–µ—Ç—ã"]
    ]

    markup = ReplyKeyboardMarkup(
        message_keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    bunch_img = requests.get(bunch['image'])
    update.message.reply_photo(
        bunch_img.content,
        caption=menu_msg,
        reply_markup=markup,
        parse_mode=ParseMode.HTML
    )

    return States.CHOISE_PEOPLE


def show_all_bunches(update, context):
    bunches = context.user_data['bunches']
    for bunch in bunches['bunch']:
        menu_msg = get_menu_msg(bunch)
        bunch_img = requests.get(bunch['image'])
        update.message.reply_photo(
            bunch_img.content,
            caption=menu_msg,
            parse_mode=ParseMode.HTML
        )
    message_keyboard = [
        [
            "–§–ª–æ—Ä–∏—Å—Ç",
            "–ó–∞–∫–∞–∑"],
        [
            "–î—Ä—É–≥–æ–π –±—É–∫–µ—Ç",
            "–í—Å–µ –±—É–∫–µ—Ç—ã"]
    ]
    markup = ReplyKeyboardMarkup(
        message_keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    update.message.reply_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–µ—Ç', reply_markup=markup)
    return States.CHOISE_PEOPLE


def florist(update, context):
    update.message.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ —Ñ–ª–æ—Ä–∏—Å—Ç—É')
    return States.REASON_TO_FLORIST


def order(update, context):
    update.message.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è')
    return States.GET_NAME


def get_name(update, context):
    context.user_data["user_name"] = update.message.text
    update.message.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ id –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–≥–æ—Å—è –±—É–∫–µ—Ç–∞. –û–Ω –µ—Å—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –±—É–∫–µ—Ç–∞.')
    return States.GET_BUNCH_ID


def get_bunch_id(update, context):
    context.user_data["bunch_id"] = update.message.text
    update.message.reply_text('–ü–æ –∫–∞–∫–æ–º—É –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∏—Ç—å')
    return States.GET_ADDRESS


def get_address(update, context):
    context.user_data["address"] = update.message.text
    update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏. –ù–æ–º–µ—Ä –≤–≤–æ–¥–∏—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7(946)3457687')
    return States.USER_PHONE_NUMBER


def get_user_phone_number(update: Update, context: CallbackContext) -> States:
    phone_number = phonenumbers.parse(update.message.text, "RU")
    if not phonenumbers.is_valid_number(phone_number):
        message_keyboard = [
            [
                KeyboardButton(
                    '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                    request_contact=True)
            ]
        ]
        markup = ReplyKeyboardMarkup(
            message_keyboard,
            one_time_keyboard=True,
            resize_keyboard=True)
        error_message = dedent("""\
        –í–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ù–æ–º–µ—Ä –≤–≤–æ–¥–∏—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7(946)3457687'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:
        """)
        update.message.reply_text(error_message, reply_markup=markup)
        return States.USER_PHONE_NUMBER
    context.user_data["phone_number"] = update.message.text
    update.message.reply_text(
        '–í –∫–∞–∫–æ–π –¥–µ–Ω—å –∏ –≤ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –∂–µ–ª–∞–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É. –ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM (2023-01-23 15:00)')
    return States.GET_DELIVERY_PERIOD


def get_delivery_time(update, context):
    context.user_data["delivery_time"] = update.message.text
    update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞')
    payload = {
        'firstname': context.user_data["user_name"],
        'address': context.user_data["address"],
        'phonenumber': context.user_data["phone_number"],
        'delivered_at': context.user_data["delivery_time"],
        'bunch_id': context.user_data["bunch_id"]
    }
    order = call_api_post('order/create/', payload=payload)
    context.user_data["order_id_delete"] = order['order_id']
    message_keyboard = [
        [
            "–í—Å–µ –≤–µ—Ä–Ω–æ",
            "–í –∑–∞–∫–∞–∑–µ –æ—à–∏–±–∫–∞"],
    ]

    markup = ReplyKeyboardMarkup(
        message_keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    menu_msg = dedent(f"""\
                        <b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –±—É–∫–µ—Ç ‚Ññ:</b>
                        {order['bunch_id']}
                        <b>–°–æ—Å—Ç–∞–≤ –±—É–∫–µ—Ç–∞:</b>
                        {order['composition']}
                        <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
                        {order['description']}
                        <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b>
                        {order['name']}
                        <b>–¶–µ–Ω–∞:</b>
                        {order['price']}
                        
                        <b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b>
                        {context.user_data["address"]}
                        <b>–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∞–∫–∏:</b>
                        {context.user_data["delivery_time"]}
                        <b>–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏:</b>
                        {context.user_data["phone_number"]}
                        """).replace("    ", "")

    bunch_img = requests.get(order['image'])
    update.message.reply_photo(
        bunch_img.content,
        caption=menu_msg,
        reply_markup=markup,
        parse_mode=ParseMode.HTML
    )
    return States.CONFIRM_ORDER


def order_confirmed(update, context):
    update.message.reply_text(
        '–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∫—É—Ä—å–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏')


def order_delete(update, context):
    payload = {
        'order_id': context.user_data["order_id_delete"],
    }
    answer = call_api_post('order/delete/', payload=payload)
    update.message.reply_text(answer['message'])
    return States.GET_NAME


if __name__ == '__main__':
    load_dotenv()
    tg_bot_token = os.getenv("TG_BOT_TOKEN")
    bot = Bot(token=tg_bot_token)
    updater = Updater(token=tg_bot_token, use_context=True)
    dispatcher = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", greeting)],
        states={
            States.START: [
                MessageHandler(
                    Filters.text("–§–ª–æ—Ä–∏—Å—Ç"), florist
                ),
                MessageHandler(
                    Filters.text("–ó–∞–∫–∞–∑"), order
                ),
                MessageHandler(
                    Filters.text, start
                ),
            ],
            States.CHOISE_REASON: [
                MessageHandler(
                    Filters.text("–î—Ä—É–≥–æ–π –ø–æ–≤–æ–¥"), another_reason,
                ),
                MessageHandler(
                    Filters.text, choise_category
                ),
            ],
            States.MESSAGE_TO_COURIER: [
                MessageHandler(
                    Filters.text, send_orders_courier
                ),
            ],
            States.REASON_TO_FLORIST: [
                MessageHandler(
                    Filters.text, get_phonenumber
                ),
            ],
            States.MESSAGE_TO_FLORIST: [
                MessageHandler(
                    Filters.text, message_to_florist
                ),
            ],
            States.CHOISE_CATEGORY: [
                MessageHandler(
                    Filters.text, get_bunch
                )
            ],
            States.CHOISE_PEOPLE: [
                MessageHandler(
                    Filters.text("–§–ª–æ—Ä–∏—Å—Ç"), florist
                ),
                MessageHandler(
                    Filters.text("–ó–∞–∫–∞–∑"), order
                ),
                MessageHandler(
                    Filters.text("–î—Ä—É–≥–æ–π –±—É–∫–µ—Ç"), get_choice_bunch
                ),
                MessageHandler(
                    Filters.text("–í—Å–µ –±—É–∫–µ—Ç—ã"), show_all_bunches
                )
            ],
            States.GET_NAME: [
                MessageHandler(
                    Filters.text, get_name
                ),
            ],
            States.GET_BUNCH_ID: [
                MessageHandler(
                    Filters.text, get_bunch_id
                ),
            ],
            States.GET_ADDRESS: [
                MessageHandler(
                    Filters.text, get_address
                ),
            ],
            States.USER_PHONE_NUMBER: [
                MessageHandler(
                    Filters.text, get_user_phone_number
                ),
            ],
            States.GET_DELIVERY_PERIOD: [
                MessageHandler(
                    Filters.text, get_delivery_time
                ),
            ],
            States.CONFIRM_ORDER: [
                MessageHandler(
                    Filters.text("–í—Å–µ –≤–µ—Ä–Ω–æ"), order_confirmed
                ),
                MessageHandler(
                    Filters.text("–í –∑–∞–∫–∞–∑–µ –æ—à–∏–±–∫–∞"), order_delete
                ),
            ],
        },
        fallbacks=[],
        allow_reentry=True,
        name='bot_conversation',
    )

    dispatcher.add_handler(conv_handler)

    updater.start_polling()
    updater.idle()
